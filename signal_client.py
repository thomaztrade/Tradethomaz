#!/usr/bin/env python3
"""
ThomazTrade Signal Client
Utility for sending trading signals to the ThomazTrade API
"""

import requests
import json
from datetime import datetime
from typing import Optional, Dict, Any

class ThomazTradeClient:
    """Client for interacting with ThomazTrade API"""
    
    def __init__(self, base_url: str = "http://localhost:5000"):
        self.base_url = base_url.rstrip('/')
        
    def enviar_sinal_api(self, ativo: str, direcao: str, horario: str, 
                        preco: Optional[float] = None, 
                        confianca: Optional[float] = None,
                        indicadores: Optional[list] = None,
                        detalhes: Optional[str] = None) -> bool:
        """
        Envia sinal de trading para a API
        
        Args:
            ativo: Nome do ativo (ex: BTC/USD, PETR4)
            direcao: 'compra' ou 'venda'
            horario: Hor√°rio do sinal (ex: '14:30')
            preco: Pre√ßo opcional
            confianca: N√≠vel de confian√ßa (0-100)
            indicadores: Lista de indicadores usados
            detalhes: Detalhes adicionais
            
        Returns:
            True se sucesso, False se erro
        """
        url = f'{self.base_url}/api/signal'
        payload = {
            'ativo': ativo,
            'direcao': direcao,
            'horario': horario
        }
        
        # Adicionar campos opcionais
        if preco is not None:
            payload['preco'] = preco
        if confianca is not None:
            payload['confianca'] = confianca
        if indicadores:
            payload['indicadores'] = indicadores
        if detalhes:
            payload['detalhes'] = detalhes
            
        try:
            response = requests.post(url, json=payload, timeout=10)
            
            if response.status_code == 201:
                result = response.json()
                print(f'‚úÖ Sinal enviado com sucesso! ID: {result.get("id")}')
                return True
            else:
                print(f'‚ùå Erro ao enviar sinal: {response.text}')
                return False
                
        except requests.exceptions.ConnectionError:
            print('‚ùå Erro: N√£o foi poss√≠vel conectar ao servidor ThomazTrade')
            return False
        except requests.exceptions.Timeout:
            print('‚ùå Erro: Timeout na conex√£o')
            return False
        except Exception as e:
            print(f'‚ùå Erro inesperado: {str(e)}')
            return False
    
    def obter_sinais(self, limite: int = 10) -> list:
        """
        Obt√©m sinais recentes da API
        
        Args:
            limite: N√∫mero m√°ximo de sinais a retornar
            
        Returns:
            Lista de sinais ou lista vazia se erro
        """
        try:
            url = f'{self.base_url}/api/signals'
            response = requests.get(url, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                return data.get('signals', [])[:limite]
            else:
                print(f'‚ùå Erro ao obter sinais: {response.status_code}')
                return []
                
        except Exception as e:
            print(f'‚ùå Erro ao obter sinais: {str(e)}')
            return []
    
    def obter_estatisticas(self) -> Dict[str, Any]:
        """
        Obt√©m estat√≠sticas dos sinais
        
        Returns:
            Dicion√°rio com estat√≠sticas ou vazio se erro
        """
        try:
            url = f'{self.base_url}/api/stats'
            response = requests.get(url, timeout=10)
            
            if response.status_code == 200:
                return response.json()
            else:
                print(f'‚ùå Erro ao obter estat√≠sticas: {response.status_code}')
                return {}
                
        except Exception as e:
            print(f'‚ùå Erro ao obter estat√≠sticas: {str(e)}')
            return {}
    
    def registrar_usuario(self, email: str, senha: str) -> bool:
        """
        Registra novo usu√°rio
        
        Args:
            email: Email do usu√°rio
            senha: Senha do usu√°rio
            
        Returns:
            True se sucesso, False se erro
        """
        try:
            url = f'{self.base_url}/api/register'
            payload = {'email': email, 'password': senha}
            response = requests.post(url, json=payload, timeout=10)
            
            if response.status_code == 201:
                print('‚úÖ Usu√°rio registrado com sucesso!')
                return True
            else:
                result = response.json()
                print(f'‚ùå Erro no registro: {result.get("message")}')
                return False
                
        except Exception as e:
            print(f'‚ùå Erro no registro: {str(e)}')
            return False
    
    def fazer_login(self, email: str, senha: str) -> bool:
        """
        Faz login do usu√°rio
        
        Args:
            email: Email do usu√°rio
            senha: Senha do usu√°rio
            
        Returns:
            True se sucesso, False se erro
        """
        try:
            url = f'{self.base_url}/api/login'
            payload = {'email': email, 'password': senha}
            response = requests.post(url, json=payload, timeout=10)
            
            if response.status_code == 200:
                result = response.json()
                print(f'‚úÖ Login realizado com sucesso! VIP: {result.get("is_vip")}')
                return True
            else:
                result = response.json()
                print(f'‚ùå Erro no login: {result.get("message")}')
                return False
                
        except Exception as e:
            print(f'‚ùå Erro no login: {str(e)}')
            return False
    
    def testar_conexao(self) -> bool:
        """
        Testa conex√£o com a API
        
        Returns:
            True se conex√£o OK, False se erro
        """
        try:
            url = f'{self.base_url}/health'
            response = requests.get(url, timeout=5)
            
            if response.status_code == 200:
                print('‚úÖ Conex√£o com ThomazTrade API: OK')
                return True
            else:
                print('‚ùå Conex√£o com ThomazTrade API: Erro')
                return False
                
        except Exception as e:
            print(f'‚ùå Erro na conex√£o: {str(e)}')
            return False

def enviar_sinal_api(ativo: str, direcao: str, horario: str, 
                    base_url: str = "http://localhost:5000"):
    """
    Fun√ß√£o simples para compatibilidade com c√≥digo existente
    """
    client = ThomazTradeClient(base_url)
    return client.enviar_sinal_api(ativo, direcao, horario)

# Exemplos de uso
if __name__ == "__main__":
    print("üöÄ ThomazTrade Signal Client")
    print("=" * 40)
    
    # Inicializar cliente
    client = ThomazTradeClient()
    
    # Testar conex√£o
    if not client.testar_conexao():
        print("‚ùå N√£o foi poss√≠vel conectar ao servidor ThomazTrade")
        exit(1)
    
    # Exemplo 1: Enviar sinal simples
    print("\nüì§ Enviando sinal simples...")
    client.enviar_sinal_api("PETR4", "compra", "15:30")
    
    # Exemplo 2: Enviar sinal completo
    print("\nüì§ Enviando sinal completo...")
    client.enviar_sinal_api(
        ativo="BTC/USD",
        direcao="venda", 
        horario="15:45",
        preco=45800.50,
        confianca=85.5,
        indicadores=["RSI", "MACD"],
        detalhes="Sinal baseado em an√°lise t√©cnica"
    )
    
    # Exemplo 3: Obter sinais recentes
    print("\nüì• Obtendo sinais recentes...")
    sinais = client.obter_sinais(5)
    for i, sinal in enumerate(sinais, 1):
        print(f"{i}. {sinal['symbol']} - {sinal['action']} ({sinal['confidence']}%)")
    
    # Exemplo 4: Obter estat√≠sticas
    print("\nüìä Estat√≠sticas:")
    stats = client.obter_estatisticas()
    if stats:
        print(f"Total de sinais: {stats.get('total_signals', 0)}")
        print(f"Sinais de compra: {stats.get('buy_signals', 0)}")
        print(f"Sinais de venda: {stats.get('sell_signals', 0)}")
        print(f"Confian√ßa m√©dia: {stats.get('avg_confidence', 0)}%")